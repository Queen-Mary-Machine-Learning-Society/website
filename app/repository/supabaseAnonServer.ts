import { createClient } from '@supabase/supabase-js';

// const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_PROJECT_URL!;
// const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;


const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;

export const supabaseAnon = createClient(supabaseUrl, supabaseAnonKey);

/*
*   Supabase has two tables:
*   Auth.users (Auto generated by supabase for authentication, contains email, password)
*   Users (Custom table for additional user data, contains firstName, lastName)
* 
*/

type SignUpResult = {
    user?: object | null;
    error?: string | null;
  };

export const HandleSignUp = async (email: string, password: string, firstname: string, lastname: string) => {

    //Sign up the user using the supabaseAnon client
    console.log("Signing up user" + email + " " + password + " " + firstname + " " + lastname);
    const { data, error } = await supabaseAnon.auth.signUp({
      email: email,
      password: password,
    });
  
    if (error) {
      console.error('Error signing up:', error.message);
      return { error: error.message };;
    } else {
        console.log('User signed up');
        window.location.href = "/login"; 
    }
    
    // Insert additional user data into the custom Users table
    const userId = data.user?.id;
    if (userId) {
        const { data, error } = await supabaseAnon.from('users').insert([{ id: userId, firstname: firstname, lastname: lastname }]);
        if(error) {
            console.error('Error inserting user:', error.message);
        }
      console.log('User signed up and additional info inserted');
      return { user: data };
    } else {
      console.error('No user ID returned');
      return { error: 'No user ID returned' };
    }
  };

export const HandleLogin = async (email: string, password: string) => {
    const { data, error } = await supabaseAnon.auth.signInWithPassword({
      email: email,
        password: password,
    });
    if (error) {
      console.error('Error signing in:', error.message);
      return { error: error.message };
    } else {
      console.log('User signed in');
      return { data: data, error: null };
    }
  };


  export const HandleLoginWithGoogle = async () => {
    // Start the OAuth flow with Google
    console.log('Starting OAuth flow with Google...');
    const { error } = await supabaseAnon.auth.signInWithOAuth({
      provider: 'google',
    });
  
    if (error) {
      console.error('Error starting OAuth flow:', error.message);
      return { error: error.message };
    }
    console.log('OAuth sign-in initiated. Waiting for callback...');
    return { error: null };
  };
  
export const GetAllEvents = async () => {
    const { data, error } = await supabaseAnon
      .from('events')
      .select('*')
      .order('time', { ascending: false });
  
    if (error) {
      console.error('Error fetching events:', error.message);
      return [];
    }
  
    return data;
  }
